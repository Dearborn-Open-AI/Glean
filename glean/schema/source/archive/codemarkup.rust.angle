# Copyright (c) Facebook, Inc. and its affiliates.

schema codemarkup.rust.1 {

import src.1
import code.20
import codemarkup.types.1
import rust.1

#
# Resolving locations to entities
#

# Resolve Rust entities by location
predicate RustResolveLocation:
  {
    location: codemarkup.types.Location,
    entity: code.Entity,
  }
  { { Name, File, { span = Span }, nothing }, Entity } where
    rust.FileDefinition { File, Defn };
    rust.DefLocation { Defn, File, Span };
    rust.DefinitionName { Defn, rust.Name Name };
    Entity = code.Entity { rust = { definition = Defn } };

#
# Finding entities' locations
#

predicate RustEntityLocation:
  {
    entity: code.Entity,
    location: codemarkup.types.Location,
  }
  { { rust = { definition = D } }, { Name, File, { span = Span }, nothing } } where
    rust.DefLocation { D, File, Span };
    rust.DefinitionName { D, rust.Name Name };

#
# Finding references in a file
#

# file xrefs for Rust
predicate RustFileEntityXRefLocations:
  {
    file: src.File,
    xref: codemarkup.types.XRefLocation,
    entity: code.Entity,
  }
  { File, { TargetLocation, { span = SrcSpan } }, Entity } where
    rust.FileXRefs { File, XRefs };
    { TargetDef, SrcSpans } = XRefs[..];
    SrcSpan = SrcSpans[..];

    # workaroud T96159670 , do local refs only
    TargetFile = File;

    rust.DefLocation { TargetDef, TargetFile, TargetSpan };
    rust.DefinitionName { TargetDef, rust.Name Name };
    { Name, TargetFile, { span = TargetSpan }, nothing } = TargetLocation;
    Entity = code.Entity { rust = { definition = TargetDef } };

#
# Language entity uses
#

predicate RustEntityUses:
  {
    target: code.Entity,
    file: src.File,
    span: src.ByteSpan,
  }
  { { rust = { definition = Def } }, File, Span } where
    rust.DefinitionUses { Def, File, Spans };
    Span = Spans[..];

}

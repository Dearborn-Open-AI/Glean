# Copyright (c) Facebook, Inc. and its affiliates.

schema search.code.5 {
import code.15
import code.hack.3
import code.python.1
import flow.3
import hack.5
import python.3
import pp1.1
import rust.1
import thrift.4
import search.hack.6

# global entity search by identifier name (or prefix)
predicate SearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  PythonSearchByName {Name, Entity} |
  HackSearchByName {Name, Entity} |
  FlowSearchByName {Name, Entity}

predicate HackSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { hack = { decl = D }}} where
  search.hack.SearchByName { name = hack.Name Name, decl = D };

predicate PythonSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { python = { decl = D }}} where
  python.DeclarationWithLocalName { local_name = python.Name Name, declaration = D };
  python.NonImportDeclaration D;

predicate FlowSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { flow = { decl = D }}} where
  flow.SearchByName { name = flow.Name Name, decl = D};

}

# Copyright (c) Facebook, Inc. and its affiliates.

schema search.code.6 {

import code.15
import code.cxx.3
import code.hack.3
import code.python.1
import cxx1.4
import flow.3
import hack.5
import pp1.1
import python.3
import rust.1
import search.cxx.4
import search.hack.6
import search.hs.3
import thrift.4

# global entity search by identifier name (or prefix)
predicate SearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  PythonSearchByName { Name, Entity } |
  HackSearchByName { Name, Entity } |
  FlowSearchByName { Name, Entity } |
  CxxSearchByName { Name, Entity } |
  HsSearchByName { Name, Entity }

#
# Language-specific identifier search
#

predicate HackSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { hack = { decl = D }}} where
  search.hack.SearchByName { name = hack.Name Name, decl = D };

predicate PythonSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { python = { decl = D }}} where
  python.DeclarationWithLocalName { local_name = python.Name Name, declaration = D };
  python.NonImportDeclaration D;

predicate FlowSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { flow = { decl = D }}} where
  flow.SearchByName { name = flow.Name Name, decl = D};

predicate CxxSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { cxx = E }} where
  search.cxx.SearchByNameAndScope { name = cxx1.Name Name, entity = E }

predicate HsSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, E } where
  search.hs.SearchByName { name = Name, entity = E }

}

# Copyright (c) Facebook, Inc. and its affiliates.

schema search.code.7 {
import code.16
import code.cxx.3
import code.hack.3
import code.python.1
import cxx1.4
import flow.3
import hack.5
import pp1.1
import python.3
import rust.1
import search.cxx.4
import search.hack.6
import search.hs.3
import thrift.4

# global entity search by identifier name (or prefix)
predicate SearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  PythonSearchByName { Name, Entity } |
  HackSearchByName { Name, Entity } |
  FlowSearchByName { Name, Entity } |
  CxxSearchByName { Name, Entity } |
  HsSearchByName { Name, Entity }

#
# Language-specific identifier search
#

predicate HackSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { hack = { decl = D }}} where
  search.hack.SearchByName { name = hack.Name Name, decl = D };

predicate PythonSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { python = { decl = D }}} where
  python.DeclarationWithLocalName { local_name = python.Name Name, declaration = D };
  python.NonImportDeclaration D;

predicate FlowSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { flow = { decl = D }}} where
  flow.SearchByName { name = flow.Name Name, decl = D};

predicate CxxSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { cxx = E }} where
  search.cxx.SearchByNameAndScope { name = cxx1.Name Name, entity = E }

predicate HsSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, E } where
  search.hs.SearchByName { name = Name, entity = E }

}

schema search.code.8 {
import code.17
import code.cxx.3
import code.hack.3
import code.python.1
import cxx1.4
import flow.3
import hack.5
import hs.2
import pp1.1
import python.3
import rust.1
import search.cxx.4
import search.hack.6
import search.hs.5
import thrift.4

# global entity search by identifier name (or prefix)
predicate SearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  PythonSearchByName { Name, Entity } |
  HackSearchByName { Name, Entity } |
  FlowSearchByName { Name, Entity } |
  CxxSearchByName { Name, Entity } |
  HsSearchByName { Name, Entity }

# same as SearchByName but assumes `name` is lowercase. Useful for
# case-insensitive search
predicate SearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  PythonSearchByLowerCaseName { Name, Entity } |
  HackSearchByLowerCaseName { Name, Entity } |
  FlowSearchByLowerCaseName { Name, Entity } |
  CxxSearchByLowerCaseName { Name, Entity } |
  HsSearchByLowerCaseName { Name, Entity }

#
# Language-specific identifier search
#

predicate HackSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { hack = { decl = D }}} where
  search.hack.SearchByName { name = hack.Name Name, decl = D };

predicate HackSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  hack.NameLowerCase { Name, hack.Name NameCase };
  HackSearchByName { NameCase, Entity };

predicate PythonSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { python = { decl = D }}} where
  python.DeclarationWithLocalName { local_name = python.Name Name, declaration = D };
  python.NonImportDeclaration D;

predicate PythonSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  python.NameLowerCase { Name, python.Name NameCase };
  PythonSearchByName { NameCase, Entity };

predicate FlowSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { flow = { decl = D }}} where
  flow.SearchByName { name = flow.Name Name, decl = D};

predicate FlowSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  flow.NameLowerCase { Name, flow.Name NameCase };
  FlowSearchByName { NameCase, Entity };

predicate CxxSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { cxx = E }} where
  search.cxx.SearchByNameAndScope { name = cxx1.Name Name, entity = E }

predicate CxxSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  cxx1.DeclByName { name_lowercase = Name, ident = Id };
  (
    { name = cxx1.Name NameCase } = Id;
    CxxSearchByName { NameCase, Entity };
  ) | (
    { selector = Sel } = Id;
    { cxx = E } = Entity;
    search.cxx.SearchBySelector { Sel, E };
  )

predicate HsSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, E } where
  search.hs.SearchByName { name = Name, entity = E }

predicate HsSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  (
    hs.ModuleNameLowerCase { Name, hs.ModuleName NameCase } |
    hs.FunctionNameLowerCase { Name, hs.FunctionName NameCase } |
    hs.DefinitionNameLowerCase { Name, hs.DefinitionName NameCase } |
    hs.ClassNameLowerCase { Name, hs.ClassName NameCase }
  );
  HsSearchByName { NameCase, Entity };


}

schema search.code.9 {
import code.18
import code.cxx.3
import code.hack.3
import code.python.1
import cxx1.4
import flow.3
import hack.5
import hs.2
import pp1.1
import python.3
import rust.1
import search.cxx.4
import search.hack.6
import search.hs.6
import thrift.4

# global entity search by identifier name (or prefix)
predicate SearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  PythonSearchByName { Name, Entity } |
  HackSearchByName { Name, Entity } |
  FlowSearchByName { Name, Entity } |
  CxxSearchByName { Name, Entity } |
  HsSearchByName { Name, Entity }

# same as SearchByName but assumes `name` is lowercase. Useful for
# case-insensitive search
predicate SearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  PythonSearchByLowerCaseName { Name, Entity } |
  HackSearchByLowerCaseName { Name, Entity } |
  FlowSearchByLowerCaseName { Name, Entity } |
  CxxSearchByLowerCaseName { Name, Entity } |
  HsSearchByLowerCaseName { Name, Entity }

#
# Language-specific identifier search
#

predicate HackSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { hack = { decl = D }}} where
  search.hack.SearchByName { name = hack.Name Name, decl = D };

predicate HackSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  hack.NameLowerCase { Name, hack.Name NameCase };
  HackSearchByName { NameCase, Entity };

predicate PythonSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { python = { decl = D }}} where
  python.DeclarationWithLocalName { local_name = python.Name Name, declaration = D };
  python.NonImportDeclaration D;

predicate PythonSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  python.NameLowerCase { Name, python.Name NameCase };
  PythonSearchByName { NameCase, Entity };

predicate FlowSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { flow = { decl = D }}} where
  flow.SearchByName { name = flow.Name Name, decl = D};

predicate FlowSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  flow.NameLowerCase { Name, flow.Name NameCase };
  FlowSearchByName { NameCase, Entity };

predicate CxxSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { cxx = E }} where
  search.cxx.SearchByNameAndScope { name = cxx1.Name Name, entity = E }

predicate CxxSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  cxx1.DeclByName { name_lowercase = Name, ident = Id };
  (
    { name = cxx1.Name NameCase } = Id;
    CxxSearchByName { NameCase, Entity };
  ) | (
    { selector = Sel } = Id;
    { cxx = E } = Entity;
    search.cxx.SearchBySelector { Sel, E };
  )

predicate HsSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, E } where
  search.hs.SearchByName { name = Name, entity = E }

predicate HsSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  (
    hs.ModuleNameLowerCase { Name, hs.ModuleName NameCase } |
    hs.FunctionNameLowerCase { Name, hs.FunctionName NameCase } |
    hs.DefinitionNameLowerCase { Name, hs.DefinitionName NameCase } |
    hs.ClassNameLowerCase { Name, hs.ClassName NameCase }
  );
  HsSearchByName { NameCase, Entity };


}

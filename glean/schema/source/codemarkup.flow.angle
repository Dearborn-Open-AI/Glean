# Copyright (c) Facebook, Inc. and its affiliates.

schema codemarkup.flow.2 {
import src.1
import code.flow.2
import codemarkup.types.1
import flow.3

# Resolving locations to entities

predicate FlowResolveLocation:
  {
    location: codemarkup.types.Location,
    entity: code.flow.Entity,
  }
  { { NameStr, File, { span = Span }, nothing }, { decl = Decl } } where
    flow.FileDeclaration { File, Decl };
    flow.DeclarationNameSpan { Decl, Name, Span };
    Name = flow.Name NameStr;

# Finding entities' locations

predicate FlowEntityLocation:
  {
    entity: code.flow.Entity,
    location: codemarkup.types.Location,
  }
  { { decl = D }, { Name, File, { span = Span }, nothing } } where
    flow.DeclarationLocation { decl = D, file = File, span = Span };
    flow.DeclarationNameSpan { decl = D, name = flow.Name Name, span = Span };

predicate FlowFileEntityXRefLocations:
  {
    file: src.File,
    xref: codemarkup.types.XRefLocation,
    entity: code.flow.Entity,
  }
  { File, XRef, Entity } where
    FlowFileReferenceEntityXRefLocations { File, XRef, Entity } |
    FlowFileImportDeclEntityXRefLocations { File, XRef, Entity }

# Flow cross-references from occurrences.
#
# References in the Flow index point to the local import declaration
# in the file.  To resolve these to the remote reference:
#
#  * For each reference in the file (flow.FileXRef)
#  * emit a DirectXRef to its target
#  * also, if the target is a flow.ImportDeclaration
#  * find the source of the import, and emit a DirectXRef to that
#
# And do the same for type declarations.
#
# This will result in two DirectXRefs for each non-local reference,
# one pointing to the import declaration and another to the non-local
# target. The client can decide which one(s) it wants.
#
predicate FlowFileReferenceEntityXRefLocations:
  {
    file: src.File,
    xref: codemarkup.types.XRefLocation,
    entity: code.flow.Entity,
  }
  { File, {Location, { span = Src }}, Entity } where
    flow.FileXRef { file = File, ref = XRef };
    flow.FlowXRefDeclInfo { XRef, SrcLoc, Name, TargetLoc, D };
    Name = flow.Name Str;
    { span = Src } = SrcLoc;
    (
      # TODO: should be able to inline M, but the optimiser got it wrong
      { module = M, span = TargetSpan } = TargetLoc;
      { file = TargetFile } = M;
      { decl = D } = Entity;
    ) | (
      { localRef = { declaration = LocalD } } = XRef;
      flow.FlowImportXRef { LocalD, Entity, TargetFile, TargetSpan };
    ) | (
      { typeRef = { typeDeclaration = T } } = XRef;
      flow.FlowTypeImportXRef { T, Entity, TargetFile, TargetSpan };
    );
    Location = codemarkup.types.Location { Str, TargetFile, { span = TargetSpan }, nothing }

# Flow cross-references from import declarations.
#
# We want to hyperlink the identifiers in an import declaration to the
# source of the import:
#
# * For each declaration in the file (flow.FileDeclaration)
# * If it is an import declaraiton, find the source (reusing FlowImportXRef)
#
# and do the same for type declarations (FlowTypeImportXRef).
#
predicate FlowFileImportDeclEntityXRefLocations:
  {
    file: src.File,
    xref: codemarkup.types.XRefLocation,
    entity: code.flow.Entity,
  }
  { File, { Location, { span = Src } }, Entity } where
    flow.FileDeclaration { File, D };
    (
      { localDecl = LocalD } = D;
      flow.FlowImportXRef { LocalD, Entity, TargetFile, TargetSpan };
      { name = Name, loc = SrcLoc } = LocalD;
    ) | (
      { typeDecl = TypeD } = D;
      flow.FlowTypeImportXRef { TypeD, Entity, TargetFile, TargetSpan };
      { name = Name, loc = SrcLoc } = TypeD;
    );
    Location = codemarkup.types.Location { Str, TargetFile, { span = TargetSpan }, nothing };
    Name = flow.Name Str;
    { span = Src } = SrcLoc;

#
# Language entity uses
#

predicate FlowEntityUses:
  {
    target: code.flow.Entity,
    file: src.File,
    span: src.ByteSpan,
  }
  { Entity, File, Span } where
    flow.FlowEntityUsesAll { Entity, File, Span };

# documentation spans in flow are attached to declarations only
predicate FlowEntityDocumentation :
  {
    entity : code.flow.Entity,
    file : src.File,
    span : src.ByteSpan
  }
  { Entity, File, Span } where
    { decl = Decl } = Entity;
    FlowDeclarationDocumentation { Decl, File, Span }

predicate FlowDeclarationDocumentation :
  {
    decl : flow.SomeDeclaration,
    file : src.File,
    span : src.ByteSpan
  }
  { Decl, File, Span } where
    ( { localDecl = D } = Decl;
      flow.DeclarationInfo { D, _, { just = Docs } }
    ) | (
      { memberDecl = D } = Decl;
      flow.MemberDeclarationInfo { D, _, { just = Docs } }
    ) | (
      { typeDecl = D } = Decl;
      flow.TypeDeclarationInfo { D, _, { just = Docs } }
    );
    FlowDocumentationSpan { Docs, File, Span }

predicate FlowDocumentationSpan :
  {
    doc : flow.Documentation,
    file : src.File,
    span : src.ByteSpan
  }
  { Docs, File, Span } where
    { module = M , span = Span } = Docs;
    ( { file = File } = M ) |
    ( { string_ = Str } = M; flow.StringToFileModule { Str , File } )

}

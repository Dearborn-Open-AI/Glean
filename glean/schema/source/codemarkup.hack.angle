# Copyright (c) Facebook, Inc. and its affiliates.

schema codemarkup.hack.2 {
import src.1
import code.hack.4
import hack.6
import codemarkup.types.1

predicate HackResolveLocation:
  {
    location: codemarkup.types.Location,
    entity: code.hack.Entity,
  }
  { { Name, File, { span = Span }, nothing }, { decl = Decl } } where
    hack.FileDeclarations { file = File, declarations = Ds };
    Decl = Ds[..];
    hack.DeclarationName Decl -> (hack.Name Name);
    hack.DeclarationSpan { declaration = Decl, file = File, span = Span };

# Finding entities' locations

predicate HackEntityLocation:
  {
    entity: code.hack.Entity,
    location: codemarkup.types.Location,
  }
  { { decl = D }, { Name, File, { span = Span }, nothing } } where
    hack.DeclarationSpan { declaration = D, file = File, span = Span };
    hack.DeclarationName D -> (hack.Name Name);

# Finding references in a file

predicate HackFileEntityXRefLocations:
  {
    file: src.File,
    xref: codemarkup.types.XRefLocation,
    entity: code.hack.Entity,
  }
  { File, { Location, { span = Src } }, { decl = D } } where
    hack.FileXRefs { file = File, xrefs = XRefs };
    hack.XRef { target = { declaration = D }, ranges = Uses } = XRefs[..];
    hack.DeclarationName D -> (hack.Name TargetName);
    hack.DeclarationLocation { declaration = D, file = TargetFile, span = TargetSpan };
    Location = codemarkup.types.Location { TargetName, TargetFile, { span = TargetSpan }, nothing };
    Sources = prim.relToAbsByteSpans Uses;
    Src = Sources[..];

predicate HackFileEntityXRefSpans:
  {
    file: src.File,
    span: src.ByteSpan,
    entity: code.hack.Entity,
  }
  { File, Src, { decl = D } } where
    hack.FileXRefs { file = File, xrefs = XRefs };
    hack.XRef { target = { declaration = D }, ranges = Uses } = XRefs[..];
    Sources = prim.relToAbsByteSpans Uses;
    Src = Sources[..]

#
# Language entity uses
#

predicate HackEntityUses:
  {
    target: code.hack.Entity,
    file: src.File,
    span: src.ByteSpan,
  }
  { { decl = D }, File, Span } where
    hack.TargetUses { target = { declaration = D }, file = File, uses = Uses };
    Spans = prim.relToAbsByteSpans Uses;
    Span = Spans[..];

predicate HackEntityKind:
  {
    entity: code.hack.Entity,
    kind: codemarkup.types.SymbolKind,
  }
  { {decl = Decl}, Kind } where
    ({ classConst = _ } = Decl; Constant = Kind) |
    ({ container = C } = Decl;
      ({ class_ = _ } = C; Class_ = Kind) |
      ({ enum_ = _ } = C; Enum_ = Kind) |
      ({ interface_ = _ } = C; Interface = Kind) |
      ({ trait = _ } = C; Trait = Kind)
    ) |
    ({ enumerator = _ } = Decl; Enum_ = Kind) |
    ({ function_ = _ } = Decl; Function = Kind) |
    ({ globalConst = _ } = Decl; Constant = Kind) |
    ({ method = _ } = Decl; Method = Kind) |
    ({ namespace_ = _ } = Decl; Namespace = Kind) |
    ({ property_ = _ } = Decl; Property = Kind) |
    ({ typeConst = _ } = Decl; Type = Kind) |
    ({ typedef_ = _ } = Decl; Type = Kind)

predicate HackEntityInfo:
  {
    entity: code.hack.Entity,
    info: codemarkup.types.SymbolInfo,
  }
  { {decl = Decl}, { kind = Kind, isAbstract = Abs } } where
    HackEntityKind { {decl = Decl}, Kind };
    ( Method = Kind;
      { method = M } = Decl;
      hack.MethodDefinition { declaration = M, isAbstract = Abs }
    ) |
    ( Property = Kind;
      { property_ = P } = Decl;
      hack.PropertyDefinition { declaration = P, isAbstract = Abs }
    ) |
    ( Constant = Kind;
      { classConst = C } = Decl;
      hack.ClassConstDefinition { declaration = C, value = V };
      ( nothing = V; true = Abs ) | ( { just = _ } = V; false = Abs )
    ) |
    ( Type = Kind;
      { typeConst = T } = Decl;
      hack.TypeConstDefinition { declaration = T, kind = TCKind };
      ( Concrete = TCKind; false = Abs ) |
      ( Abstract = TCKind; true = Abs) |
      ( PartiallyAbstract = TCKind; true = Abs)
    ) |
    ( false = Abs;
      (Class_ = Kind) |
      (Constant = Kind; { globalConst = _ } = Decl) |
      (Enum_ = Kind) |
      (Interface = Kind) |
      (Trait = Kind) |
      (Function = Kind) |
      (Namespace = Kind) |
      (Type = Kind; { typedef_ = _ } = Decl)
    )

#
# Annotations
#

predicate HackAnnotation :
  {
    entity: code.hack.Entity,
    anns: code.hack.Annotations,
  }
  {{decl=D}, {attributes=A}} where
    ({ container = { class_ = Decl } } = D; hack.ClassDefinition{declaration=Decl, attributes=A}) |
    ({ container = { enum_ = Decl } } = D; hack.EnumDefinition{declaration=Decl, attributes=A}) |
    ({ container = { interface_ = Decl } } = D; hack.InterfaceDefinition{declaration=Decl, attributes=A}) |
    ({ container = { trait = Decl } } = D; hack.TraitDefinition{declaration=Decl, attributes=A}) |
    ({ method = Decl } = D; hack.MethodDefinition{declaration=Decl, attributes=A}) |
    ({ property_ = Decl } = D; hack.PropertyDefinition{declaration=Decl, attributes=A}) |
    ({ typeConst = Decl } = D; hack.TypeConstDefinition{declaration=Decl, attributes=A}) |
    ({ typedef_ = Decl } = D; hack.TypedefDefinition{declaration=Decl, attributes=A})

#
# Visibility
#

# (deprecated), just the visibility attributes
predicate HackVisibility :
  {
    entity: code.hack.Entity,
    visibility: codemarkup.types.Visibility,
  }
  {D, V} where
    (
      ({decl={ method = Decl }} = D; hack.MethodDefinition{declaration=Decl, visibility=Vis}) |
      ({decl={ property_ = Decl }} = D; hack.PropertyDefinition{declaration=Decl, visibility=Vis})
    );
    FromHackVisibility { Vis, V };

# helper from Hack visibility to the codemarkup.types version
predicate FromHackVisibility:
  { hack : hack.Visibility,
    out : codemarkup.types.Visibility
  }
  { In, Out } where
    ( Public = In; Public ) |
    ( Private = In; Private ) |
    ( Protected = In; Protected ) |
    ( Internal = In; Internal ) = Out;

#
# Relations
#

# child `contained by` parent
#
# - classConst, method, property, typeConst -> container
# - enumerator (field) -> enum
# - direct member of any namespace -> namespace
#
predicate HackContainsParentEntity :
  {
    child: code.hack.Entity,
    parent: code.hack.Entity,
  }
  { { decl = Child }, { decl = Parent } } where
    ( ( { classConst = Decl } = Child;
        hack.ClassConstDeclaration { container = Container } = Decl;
      ) | (
        { method = Decl } = Child;
        hack.MethodDeclaration { container = Container } = Decl;
      ) | (
        { property_ = Decl } = Child;
        hack.PropertyDeclaration { container = Container } = Decl;
      ) | (
        { typeConst = Decl } = Child;
        hack.TypeConstDeclaration { container = Container } = Decl;
      );
      Parent = hack.Declaration { container = Container }
    ) | (
      { enumerator = { enumeration = Enumeration } } = Child;
      Parent = hack.Declaration { container = {enum_ = Enumeration} }
    ) | (
      hack.NamespaceMember { namespace_ = Name, decl = Child};
      Parent = hack.Declaration { namespace_ = {name = Name }}
    )

# parent contains child
predicate HackContainsChildEntity :
  {
    parent: code.hack.Entity,
    child: code.hack.Entity
  }
  { { decl = Container }, { decl = Member } } where
    (
      (
        { container = { class_ = Class }} = Container;
        hack.ClassDefinition { declaration = Class, members = Members };
      ) |
      (
        { container = { interface_ = Interface }} = Container;
        hack.InterfaceDefinition { declaration = Interface, members = Members };
      ) |
      (
        { container = { trait = Trait }} = Container;
        hack.TraitDefinition { declaration = Trait, members = Members };
      );
      Member = Members[..]
    ) |
    (
      { container = { enum_ = EnumDecl }} = Container;
      hack.EnumDefinition { declaration = EnumDecl, enumerators = Enumerators };
      Enumerator = Enumerators[..];
      Member = hack.Declaration {enumerator = Enumerator}
    ) |
    (
      { namespace_ = {name=Name} } = Container;
      hack.NamespaceMember { namespace_ = Name, decl = Member}
    )

# parent extended by child
predicate HackExtendsChildEntity :
  {
    parent : code.hack.Entity,
    child : code.hack.Entity
  }
  { { decl = Parent }, { decl = Child } } where
  (
    { container = P } = Parent;
    hack.ContainerChild { container = P, child = C };
    { container = C } = Child;
  ) |
  (
    {method=P}=Parent;
    hack.MethodOverridden{base=P, derived=C};
    {method=C}=Child
  )

# child extends parent
predicate HackExtendsParentEntity :
  {
    child : code.hack.Entity,
    parent : code.hack.Entity
  }
  { { decl = Child }, { decl = Parent } } where
    (
      { container = C } = Child;
      hack.ContainerParent { C, P };
      { container = P } = Parent
    ) |
    ({method=C}=Child; {method=P}=Parent;
      (
        hack.MethodOverrides{derived=C, base=P}
      )
    )

# documentation spans
predicate HackEntityDocumentation :
  {
    entity : code.hack.Entity,
    file : src.File,
    span : src.ByteSpan,
  }
  { E, F, S } where
    { decl = D } = E;
    ( hack.DeclarationComment{ D, F, S } ) |
    # if this is a method, also check for docs on the base of any override
    ( { method = Derived } = D;
      hack.MethodOverrides { Derived, Base };
      hack.DeclarationComment { { method = Base }, F, S }
    )

}

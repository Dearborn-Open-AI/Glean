# Copyright (c) Facebook, Inc. and its affiliates.

schema codemarkup.java.1 {

import src.1
import code.java.5
import codemarkup.types.1
import java.alpha.1

#
# Resolving locations to entities
#

predicate JavaResolveLocation:
  {
    location: codemarkup.types.Location,
    entity: code.java.Entity,
  }
  { { Name, File, { span = Span }, nothing }, { decl = Decl } } where
    java.alpha.FileDeclarations { File, Decl };
    java.alpha.DeclarationLocation { Decl, Name, File, Span }

#
# Finding entities' locations
#

predicate JavaEntityLocation:
  {
    entity: code.java.Entity,
    location: codemarkup.types.Location,
  }
  { Entity, { Name, File, { span = Span }, nothing } } where
    { decl = Decl } = Entity;
    java.alpha.DeclarationLocation { Decl, Name, File, Span };

#
# Finding references in a file
#

# XRefs
predicate JavalFileEntityXRefLocations:
  {
    file: src.File,
    xref: codemarkup.types.XRefLocation,
    entity: code.java.Entity,
  }
  { File, { Location, { span = SrcSpan } }, { decl = Decl } } where
    java.alpha.FileXRefs { File, XRefs };
    { XRef, Spans } = XRefs[..];
    SrcSpan = Spans[..];
    java.alpha.XRefTargetDeclaration { XRef, Decl };
    java.alpha.DeclarationLocation { Decl, Name, TargetFile, TargetSpan };
    Location = codemarkup.types.Location
      { Name, TargetFile, { span = TargetSpan }, nothing };

#
# Language entity uses
#

predicate JavaEntityUses:
  {
    target: code.java.Entity,
    file: src.File,
    span: src.ByteSpan,
  }
  { { decl = Decl }, File, Span } where
    java.alpha.DeclarationUses { Decl, File, Spans };
    Span = Spans[..]

# kinds and symbol info
predicate JavaEntityKind:
  {
    entity: code.java.Entity,
    kind: codemarkup.types.SymbolKind
  }
  { Entity, Kind} where
    { decl = Decl } = Entity;
    ( { param = _ } = Decl; Variable = Kind ) |
    ( { field = _ } = Decl; Field = Kind ) |
    ( { local = _ } = Decl; Variable = Kind ) |
    ( { ctor = _ } = Decl; Constructor = Kind ) |
    ( { method = _ } = Decl; Method = Kind ) |
    ( { interface_ = _ } = Decl; Interface = Kind ) |
    ( { class_ = _ } = Decl; Class_ = Kind ) |
    ( { enum_ = _ } = Decl; Enum_ = Kind );

#
# Relationships
#

predicate JavaContainsParentEntity:
  {
    child: code.java.Entity,
    parent: code.java.Entity
  }
  { { decl = Child }, { decl = Parent } } where
    java.alpha.ParentDeclaration { Child, Parent };

predicate JavaExtendsParentEntity:
  {
    child: code.java.Entity,
    parent: code.java.Entity
  }
  { { decl = Child }, { decl = Parent } } where
    java.alpha.ExtendsDeclaration { Child, Parent };

}

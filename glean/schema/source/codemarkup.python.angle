# Copyright (c) Facebook, Inc. and its affiliates.

schema codemarkup.python.2 {
import src.1
import code.python.1
import codemarkup.types.1
import python.3

# Resolving locations to entities

predicate PythonResolveLocation:
  {
    location: codemarkup.types.Location,
    entity: code.python.Entity,
  }
  { { Name, File, { span = Span }, nothing }, { decl = Decl } } where
    python.DeclarationsByFile { File, Span, Decl };
    python.DeclarationToName Decl -> (Name : string);

# Finding entities' locations

predicate PythonEntityLocation:
  {
    entity: code.python.Entity,
    location: codemarkup.types.Location,
  }
  { { decl = D }, { Name, File, { span = Span }, nothing } } where
    python.DeclarationLocation { declaration = D, file = File, span = Span };
    python.DeclarationToName D -> (python.Name Name);

predicate PythonFileEntityXRefLocations:
  {
    file: src.File,
    xref: codemarkup.types.XRefLocation,
    entity: code.python.Entity,
  }
  {File, {Location, { span = Src }}, Entity} where
  {PyDecl, Src} = (
    python.DeclarationsByFile {
      file = File,
      span = Src,
      declaration = { imp = { from_name = TargetName } },
    };
    python.DeclarationWithName { name = TargetName, declaration = TargetDecl};
    {TargetDecl, Src}
  ) | (
    python.DirectXRefsByFile {File, XRef};
    XRef
  );
  { decl = PyDecl } = Entity;
  PythonEntityNameAndLocation { Entity, Name, TargetFile, TargetSpan };
  { Name, TargetFile, { span = TargetSpan }, nothing } = Location;

predicate PythonEntityNameAndLocation:
  {
    entity: code.python.Entity,
    name: string,
    file: src.File,
    span: src.ByteSpan,
  }
  {Ent, Name, File, Span} where
  { decl = PyDecl } = Ent;
  (
    { cls = D } = PyDecl;
    D = python.ClassDeclaration { name = PyName };
  ) | (
    { func = D } = PyDecl;
    D = python.FunctionDeclaration { name = PyName };
  ) | (
    { variable = D } = PyDecl;
    D = python.VariableDeclaration { name = PyName };
  ) | (
    { imp = D } = PyDecl;
    D = python.ImportStatement { from_name = PyName };
  ) | (
    { module = D } = PyDecl;
    D = python.Module { name = PyName };
  );
  PyName = python.Name Name;
  python.DeclarationLocation {PyDecl, File, Span};

#
# Language entity uses
#

predicate PythonEntityUses:
  {
    target: code.python.Entity,
    file: src.File,
    span: src.ByteSpan,
  }
  { { decl = D }, File, Span } where
  python.DeclarationUses { declaration = D, file = File, span = Span}

#
# Language-specific symbol info
#

predicate NonImportPythonDeclarationKind:
  {
    declaration: python.Declaration,
    kind: codemarkup.types.SymbolKind,
  }
  { D, Kind } where
    ({cls = _} = D; Class_ = Kind ) |
    ({module = _} = D; Module = Kind ) |
    ({func = _} = D;
      python.ContainingTopLevelDeclaration { D, C };
      ({module = _} = C; Function = Kind ) |
      ({cls = _} = C; Method = Kind ) |
      ({func = _} = C; Function = Kind )) |  # these are locals
    ({variable = _} = D;
      python.ContainingTopLevelDeclaration { D, C };
      ({module = _} = C; Variable = Kind ) |
      ({cls = _} = C; Field = Kind ) |
      ({func = _} = C; Variable = Kind ))  # these are locals

# For backward compatibility:
predicate NonImportPythonDeclarationInfo:
  {
    declaration: python.Declaration,
    info: codemarkup.types.SymbolInfo,
  }
  { D, { kind = K, isAbstract = false }} where
    NonImportPythonDeclarationKind { D, K }

predicate PythonEntityKind:
  {
    entity: code.python.Entity,
    kind: codemarkup.types.SymbolKind,
  }
  { { decl = D }, Kind } where
    NonImportPythonDeclarationKind { D, Kind } |
    ({imp = {from_name = FN}} = D;
      python.DeclarationWithName { FN, Imported };
      NonImportPythonDeclarationKind { Imported, Kind }
    )

# For backward compatibility:
predicate PythonEntityInfo:
  {
    entity: code.python.Entity,
    info: codemarkup.types.SymbolInfo,
  }
  { E, { kind = K, isAbstract = false }} where
    PythonEntityKind { entity = E, kind = K }

#
# Relations
#

predicate PythonContainsChildEntity :
  {
    parent: code.python.Entity,
    child: code.python.Entity
  }
  { { decl = Container }, { decl = Member } } where
    ( python.ContainingTopLevelDeclaration
      {
        declaration = Member,
        container = Container
      }
    )

}

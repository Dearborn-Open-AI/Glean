# Copyright (c) Facebook, Inc. and its affiliates.

schema codemarkup.search.1 {

import code.24
import codemarkup.30
import codemarkup.types.1
import search.code.16

#
# Public API
#

# Note the Insensitive case implies you did toLower on the argument
type SearchCase = enum { Sensitive | Insensitive }

#
# search for entities by identifier name, either case insensitive or not
# with optional symbol kind and language filter constraints
#
predicate SearchByName:
  {
    searchcase: SearchCase,
    name: string,
    entity: code.Entity,
    location: codemarkup.types.Location,
    kind: maybe codemarkup.types.SymbolKind,
    language: code.Language # optional language filter, could be wild
  }
  { SearchCase, Name, Entity, Location, Kind, Language } where
    (Sensitive = SearchCase;
      search.code.SearchByNameAndLanguage { Name, Language, Entity }) |
    (Insensitive = SearchCase;
      search.code.SearchByLowerCaseNameAndLanguage { Name, Language, Entity });
    EntityLocationAndKind { Entity, Location, Kind };

#
# search by name and scope, with language and kind filters.
#
predicate SearchByScope:
  {
    searchcase: SearchCase,
    name: string,
    scope: [string],
    entity: code.Entity,
    location: codemarkup.types.Location,
    kind: maybe codemarkup.types.SymbolKind,
    language: code.Language
  }
  { SearchCase, Name, Scope, Entity, Location, Kind, Language } where
    (Sensitive = SearchCase;
      search.code.SearchByScope { Name, Scope, Language, Entity }) |
    (Insensitive = SearchCase;
      search.code.SearchByLowerCaseScope { Name, Scope, Language, Entity });
    EntityLocationAndKind { Entity, Location, Kind };

# -------------------------------------
#
# search for entities by identifier name, either case insensitive or not
#
# (deprecated)
#
predicate SearchByNameAndKind:
  {
    searchcase: SearchCase,
    name: string,
    entity: code.Entity,
    location: codemarkup.types.Location,
    kind: maybe codemarkup.types.SymbolKind,
  }
  { SearchCase, Name, Entity, Location, Kind } where
    ( Sensitive = SearchCase;
      SearchEntityByName { Name, Entity, Location, Kind }) |
    ( Insensitive = SearchCase;
      SearchEntityByLowerCaseName { Name, Entity, Location, Kind })

#
# Internal helpers
#

# Basic entity search. From exact name or prefix
# to entity, and location and kind. May filter on kind if present.
#
# (deprecated)
predicate SearchEntityByName:
  {
    name: string,
    entity: code.Entity,
    location: codemarkup.types.Location,
    kind: maybe codemarkup.types.SymbolKind,
  }
  { Name, Entity, Location, MKind } where
    search.code.SearchByName { Name, Entity };
    EntityLocationAndKind { Entity, Location, MKind };

# And the normalized lowercase form
#
# (deprecated)
predicate SearchEntityByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
    location: codemarkup.types.Location,
    kind: maybe codemarkup.types.SymbolKind,
  }
  { Name, Entity, Location, MKind } where
    search.code.SearchByLowerCaseName { Name, Entity };
    EntityLocationAndKind { Entity, Location, MKind };

# Symbol kind of entity, where kind is optional.
predicate EntityLocationAndKind:
  {
    entity: code.Entity,
    location: codemarkup.types.Location,
    kind: maybe codemarkup.types.SymbolKind
  }
  { Entity, Location, MKind } where
    codemarkup.EntityLocation { Entity, Location };
    (if codemarkup.EntityKind { Entity, Kind }
      then { just = Kind } else nothing) = MKind;

}

# Copyright (c) Facebook, Inc. and its affiliates.

schema codemarkup.thrift.4 {

import code.thrift.5
import codemarkup.types.1
import src.1
import thrift.7

#
# Resolving locations to entities
#

predicate ThriftResolveLocation:
  {
    location: codemarkup.types.Location,
    entity: code.thrift.Entity,
  }
  { { Name, FileS, { range = Range }, nothing }, { decl = Decl } } where
    FileT = thrift.File FileS;
    thrift.FileDeclaration { FileT, Decl };
    thrift.DeclarationNameSpan { Decl, Identifier, FileT, {LB, CB, LE, CE} };
    Identifier = thrift.Identifier Name;
    { file = FileS, lineBegin = LB, columnBegin = CB, lineEnd = LE, columnEnd = CE } = Range;

#
# Finding entities' locations
#

predicate ThriftEntityLocation:
  {
    entity: code.thrift.Entity,
    location: codemarkup.types.Location,
  }
 { { decl = Decl }, { Name, File, { range = Range }, nothing } } where
    thrift.DeclarationNameSpan { Decl, Ident, thrift.File File, Loc };
    thrift.Identifier Name = Ident;
    { LB, CB, LE, CE } = Loc;
    { File, LB, CB, LE, CE } = Range;

#
# Finding references in a file
#

predicate ThriftFileEntityXRefLocations:
  {
    file: src.File,
    xref: codemarkup.types.XRefLocation,
    entity: code.thrift.Entity,
  }
 {
   File,
   { target = TargetLocation, source = { range = SourceRange } },
   { decl = XRefTarget }
  }
  where
  FileT = thrift.File File;
  thrift.FileXRefs { file = FileT, xrefs = XRefs };
  { { startLine = LB, startCol = CB, endLine = LE, endCol = CE }  , XRefTarget } = XRefs[..];
  { file = File, lineBegin = LB, columnBegin = CB, lineEnd = LE, columnEnd = CE } = SourceRange;
  thrift.DeclarationNameSpan { decl = XRefTarget,
                               name = thrift.Identifier Name,
                               file = TargetFileT,
                               span = { TLB, TCB, TLE, TCE } };
  TargetFileT = thrift.File TargetFile;
  TargetRange = {TargetFile, TLB, TCB, TLE, TCE };
  { Name, TargetFile, { range = TargetRange }, nothing } = TargetLocation;

#
# Extends relationships
#

predicate ThriftContainsChildEntity :
  {
    parent: code.thrift.Entity,
    child: code.thrift.Entity
  }
  { { decl = Parent }, { decl = Child } } where
    { service_ = P } = Parent;
    F = thrift.FunctionName { service_ = P };
    { function_ = F } = Child

predicate ThriftContainsParentEntity :
  {
    child: code.thrift.Entity,
    parent: code.thrift.Entity
  }
  { { decl = Child }, { decl = Parent } } where
    { function_ = F } = Child;
    thrift.FunctionName { service_ = P } = F;
    { service_ = P } = Parent

predicate ThriftExtendsChildEntity :
  {
    parent: code.thrift.Entity,
    child: code.thrift.Entity
  }
  { { decl = Parent }, { decl = Child } } where
    { service_ = P } = Parent;
    thrift.ServiceChild { parent = P, child = C };
    { service_ = C } = Child

predicate ThriftExtendsParentEntity :
  {
    child: code.thrift.Entity,
    parent: code.thrift.Entity
  }
  { { decl = Child }, { decl = Parent } } where
    { service_ = C } = Child ;
    thrift.ServiceParent { child = C, parent = P };
    { service_ = P } = Parent

}

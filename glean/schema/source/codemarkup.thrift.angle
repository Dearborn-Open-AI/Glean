# Copyright (c) Facebook, Inc. and its affiliates.

schema codemarkup.thrift.4 {
import src.1
import code.thrift.4
import codemarkup.types.1
import thrift.7

#
# Resolving locations to entities
#

predicate ThriftResolveLocation:
  {
    location: codemarkup.types.Location,
    entity: code.thrift.Entity,
  }
  { { Name, FileS, { range = Range }, nothing }, Declaration } where
    FileT = thrift.File FileS;
    thrift.FileDeclaration { FileT, Declaration };
    thrift.DeclarationNameSpan { Declaration, Identifier, FileT, {LB, CB, LE, CE} };
    Identifier = thrift.Identifier Name;
    { file = FileS, lineBegin = LB, columnBegin = CB, lineEnd = LE, columnEnd = CE } = Range;

#
# Finding entities' locations
#

predicate ThriftEntityLocation:
  {
    entity: code.thrift.Entity,
    location: codemarkup.types.Location,
  }
 { Decl, { Name, File, { range = Range }, nothing } } where
    thrift.DeclarationNameSpan { Decl, Ident, thrift.File File, Loc };
    thrift.Identifier Name = Ident;
    { LB, CB, LE, CE } = Loc;
    { File, LB, CB, LE, CE } = Range;

#
# Finding references in a file
#

predicate ThriftFileEntityXRefLocations:
  {
    file: src.File,
    xref: codemarkup.types.XRefLocation,
    entity: code.thrift.Entity,
  }
 {
   File,
   { target = TargetLocation, source = { range = SourceRange } },
   XRefTarget
  }
  where
  FileT = thrift.File File;
  thrift.FileXRefs { file = FileT, xrefs = XRefs };
  { { startLine = LB, startCol = CB, endLine = LE, endCol = CE }  , XRefTarget } = XRefs[..];
  { file = File, lineBegin = LB, columnBegin = CB, lineEnd = LE, columnEnd = CE } = SourceRange;
  thrift.DeclarationNameSpan { decl = XRefTarget,
                               name = thrift.Identifier Name,
                               file = TargetFileT,
                               span = { TLB, TCB, TLE, TCE } };
  TargetFileT = thrift.File TargetFile;
  TargetRange = {TargetFile, TLB, TCB, TLE, TCE };
  { Name, TargetFile, { range = TargetRange }, nothing } = TargetLocation;

}

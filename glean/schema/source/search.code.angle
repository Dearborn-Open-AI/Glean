# Copyright (c) Facebook, Inc. and its affiliates.

schema search.code.16 {
import code.24
import code.cxx.4
import code.hack.4
import code.python.1
import cxx1.5
import flow.3
import hack.6
import erlang.1
import hs.2
import lsif.2
import pp1.1
import python.3
import rust.1
import search.cxx.5
import search.erlang.4
import search.hack.7
import search.hs.9
import thrift.7

#
# public API
#

# global symbol search with language constraint
predicate SearchByNameAndLanguage:
  {
    name: string,
    language: code.Language,
    entity: code.Entity,
  }
  { Name, Language, Entity } where
    ( Hack = Language; HackSearchByName { Name, Entity } ) |
    ( Python = Language; PythonSearchByName { Name, Entity } ) |
    ( JavaScript = Language; FlowSearchByName { Name, Entity } ) |
    ( Cpp = Language; CxxSearchByName { Name, Entity } ) |
    ( Haskell = Language; HsSearchByName { Name, Entity } ) |
    ( Erlang = Language; ErlangSearchByName { Name, Entity } ) |
    ( Rust = Language; RustSearchByName { Name, Entity } );
    code.EntityLanguage { Entity, Language }; # double check the entity lang

# global symbol search normalized to lower case
predicate SearchByLowerCaseNameAndLanguage:
  {
    name: string,
    language: code.Language,
    entity: code.Entity,
  }
  { Name, Language, Entity } where
    ( Hack = Language; HackSearchByLowerCaseName { Name, Entity } ) |
    ( Python = Language; PythonSearchByLowerCaseName { Name, Entity } ) |
    ( JavaScript = Language; FlowSearchByLowerCaseName { Name, Entity } ) |
    ( Cpp = Language; CxxSearchByLowerCaseName { Name, Entity } ) |
    ( Haskell = Language; HsSearchByLowerCaseName { Name, Entity } ) |
    ( Erlang = Language; ErlangSearchByLowerCaseName { Name, Entity } ) |
    ( Rust = Language; RustSearchByLowerCaseName { Name, Entity } );
    code.EntityLanguage { Entity, Language }; # double check the entity lang

# scoped search (experimental!)

predicate SearchByScope:
  {
    name: string,
    scope: [string],
    language: code.Language,
    entity: code.Entity,
  }
  { Name, Scope, Language, Entity } where
    ( Cpp = Language; CxxSearchByScope { Name, Scope, Entity } ) |
    ( Hack = Language; HackSearchByScope { Name, Scope, Entity } );
    code.EntityLanguage { Entity, Language };

# lower case by scope (experimental!)
predicate SearchByLowerCaseScope:
  {
    name: string,
    scope: [string],
    language: code.Language,
    entity: code.Entity,
  }
  { Name, Scope, Language, Entity } where
    ( Cpp = Language; CxxSearchByLowerCaseScope { Name, Scope, Entity } ) |
    ( Hack = Language; HackSearchByLowerCaseScope { Name, Scope, Entity } );
    code.EntityLanguage { Entity, Language };

# global entity search by identifier name (or prefix)
# (deprecated)
predicate SearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  PythonSearchByName { Name, Entity } |
  HackSearchByName { Name, Entity } |
  FlowSearchByName { Name, Entity } |
  CxxSearchByName { Name, Entity } |
  HsSearchByName { Name, Entity } |
  ErlangSearchByName { Name, Entity } |
  LsifSearchByName { Name, Entity } |
  RustSearchByName { Name, Entity }

# same as SearchByName but assumes `name` is lowercase. Useful for
# case-insensitive search
# (deprecated)
predicate SearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  PythonSearchByLowerCaseName { Name, Entity } |
  HackSearchByLowerCaseName { Name, Entity } |
  FlowSearchByLowerCaseName { Name, Entity } |
  CxxSearchByLowerCaseName { Name, Entity } |
  HsSearchByLowerCaseName { Name, Entity } |
  ErlangSearchByLowerCaseName { Name, Entity } |
  LsifSearchByLowerCaseName { Name, Entity } |
  RustSearchByLowerCaseName { Name, Entity };

#
# Language-specific identifier search
#

predicate HackSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { hack = { decl = D }}} where
  search.hack.SearchByName { name = hack.Name Name, decl = D };

predicate HackSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  hack.NameLowerCase { Name, hack.Name NameCase };
  HackSearchByName { NameCase, Entity };

predicate HackSearchByScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity } where
    Name = hack.Name NameStr;
    HackSearchByScopeWithName { Name, Query, Entity }

predicate HackSearchByLowerCaseScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity} where
    hack.NameLowerCase { NameStr, Name };
    HackSearchByScopeWithName { Name, Query, Entity }

# private helper to share name facts between the calsl
predicate HackSearchByScopeWithName:
  {
    name: hack.Name,
    scope: [string],
    entity: code.Entity,
  }
  { Name, Query, { hack = { decl = Decl }}} where
    search.hack.QueryToScope { Query, ScopeName, ScopeNamespace };
    if (nothing = ScopeNamespace) # don't try to match empty names
      then search.hack.SearchInContext { Name, ScopeName, _ , Decl }
      else search.hack.SearchInContext { Name, ScopeName, ScopeNamespace, Decl };

predicate PythonSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    LocalName = python.LocalName NameStr;
    PythonSearchByLocalNameFact { LocalName, Entity }

predicate PythonSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    python.LocalNameLowerCase { NameStr, LocalName };
    PythonSearchByLocalNameFact { LocalName, Entity }

# helper to avoid repeatedly doing string search
predicate PythonSearchByLocalNameFact:
  {
    name: python.LocalName,
    entity: code.Entity,
  }
  { LocalName, { python = { decl = Decl }}} where
    python.SearchByLocalName { LocalName, Decl };
    python.NonImportDeclaration Decl;

# helper to avoid repeatedly doing string search
# (deprecated)
predicate PythonSearchByNameFact:
  {
    name: python.Name,
    entity: code.Entity,
  }
  { Name, { python = { decl = Decl }}} where
    python.DeclarationWithLocalName { Name, Decl };
    python.NonImportDeclaration Decl;

predicate FlowSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { flow = { decl = D }}} where
  flow.SearchByName { name = flow.Name Name, decl = D};

predicate FlowSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  flow.NameLowerCase { Name, flow.Name NameCase };
  FlowSearchByName { NameCase, Entity };

predicate CxxSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    Name = cxx1.Name NameStr;
    CxxSearchByNameAndScopeFact { name = Name, entity = Entity };

predicate CxxSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
  cxx1.DeclByName { name_lowercase = NameStr, ident = Id };
  (
    { name = Name } = Id;
    CxxSearchByNameAndScopeFact { name = Name, entity = Entity };
  ) | (
    { selector = Sel } = Id;
    search.cxx.SearchBySelector { Sel, Ent };
    { cxx = Ent } = Entity;
  )

predicate CxxSearchByScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity } where
    search.cxx.QueryToScope { Query, Scope };
    Name = cxx1.Name NameStr;
    CxxSearchByNameAndScopeFact { Name, Scope, Entity }

predicate CxxSearchByLowerCaseScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity } where
    cxx1.DeclByName { name_lowercase = NameStr, ident = { name = Name } };
    search.cxx.QueryToScope { Query, Scope };
    CxxSearchByNameAndScopeFact { Name, Scope, Entity };

predicate CxxSearchByNameAndScopeFact:
  {
    name: cxx1.Name,
    scope : cxx1.Scope,
    entity : code.Entity
  }
  { Name, Scope, { cxx = DefnE }} where
    search.cxx.SearchByNameAndScope { Name, Scope, Ent };
    # I think we can avoid searching through decl families since we're
    # searching all matches anyway
    if ({ decl = Decl } = Ent) # just definitions , not decls
      then ( search.cxx.DeclIsDefn { Decl, Defn }; { defn = Defn } = DefnE )
      else ( Ent = DefnE );

predicate HsSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { hs = E } } where
  search.hs.SearchByName { name = Name, entity = E }

predicate HsSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  (
    hs.ModuleNameLowerCase { Name, hs.ModuleName NameCase } |
    hs.FunctionNameLowerCase { Name, hs.FunctionName NameCase } |
    hs.DefinitionNameLowerCase { Name, hs.DefinitionName NameCase } |
    hs.ClassNameLowerCase { Name, hs.ClassName NameCase }
  );
  HsSearchByName { NameCase, Entity };

predicate ErlangSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { erlang = E } } where
  search.erlang.SearchByName { name = Name, entity = E }

predicate ErlangSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  erlang.NameLowerCase { Name, NameCase };
  ErlangSearchByName { NameCase, Entity }

predicate LsifSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { lsif = Entity } } where
  lsif.SearchByName { lsif.Name Name, Entity }

predicate LsifSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { lsif = Entity } } where
  lsif.NameLowerCase { Name, NameCase };
  lsif.SearchByName { NameCase, Entity }

predicate RustSearchByName:
  {
    name: string,
    entity: code.Entity
  }
  { NameStr, { rust = { definition = Entity } } } where
    Name = rust.Name NameStr;
    rust.SearchByName { Name, Entity }

predicate RustSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity
  }
  { Name, { rust = { definition = Entity } } } where
    rust.NameLowerCase { Name, NameCase };
    rust.SearchByName { NameCase, Entity }

}

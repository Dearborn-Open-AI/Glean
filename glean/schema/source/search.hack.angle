# Copyright (c) Facebook, Inc. and its affiliates.

schema search.hack.7 {
import hack.6

# SearchByName can be used to search for symbols in any context (wildcard
# context).
#
# This can be combined with hack.NameLowerCase for case-insensitive search.
predicate SearchByName :
  {
    name : hack.Name,
    decl : hack.Declaration
  }
  { N, Decl } where
  Decl =
    hack.Declaration { classConst = { name = N }} |
    hack.Declaration { enumerator = { name = N }} |
    hack.Declaration { method = { name = N }} |
    hack.Declaration { property_ = { name = N }} |
    hack.Declaration { typeConst = { name = N }} |
    (
      QN = {name = N} : hack.QName;
      hack.Declaration { container = { class_ = { name = QN }}} |
      hack.Declaration { container = { interface_ = {name = QN }}} |
      hack.Declaration { container = { trait = { name = QN }}} |
      hack.Declaration { container = { enum_ = { name = QN }}} |
      hack.Declaration { function_ = { name = QN }} |
      hack.Declaration { globalConst = { name = QN }} |
      hack.Declaration { typedef_ = { name = QN }}
    ) | (
      QN = {name = N} : hack.NamespaceQName;
      hack.Declaration { namespace_ = { name = QN }}
    )

# SearchInNamespace can find containers (class_, interface_, trait_),
# enum_, function_, globalConst, namespace_, and typedef_ in a NamespaceQName
#
# With namespace_ of nothing, this searches for top-level declarations (global
# items without a context).
#
# Also helps SearchInContext to find declarations in non-empty namespace
# contexts.
predicate SearchInNamespace :
  {
    name : hack.Name,
    namespace_ : maybe hack.NamespaceQName,
    decl : hack.Declaration
  }
  { N, NS, Decl } where
  Decl = (
    QN = hack.QName { name = N, namespace_ = NS };
    hack.Declaration { container = { class_ = { name = QN }}} |
    hack.Declaration { container = { interface_ = { name = QN }}} |
    hack.Declaration { container = { trait = { name = QN }}} |
    hack.Declaration { container = { enum_ = { name = QN }}} |
    hack.Declaration { function_ = { name = QN }} |
    hack.Declaration { globalConst = { name = QN }} |
    hack.Declaration { typedef_ = { name = QN }}
  ) | hack.Declaration { namespace_ = { name = { name = N, parent = NS }}}

# Find classConst, method, property_, and typeConst in any parent container
# (class, interface, or trait)
#
# Helps SearchInContainerOrEnum to find declarations in container contexts
predicate SearchInContainer :
  {
    name : hack.Name,
    containerName : hack.Name,
    containerNamespace : maybe hack.NamespaceQName,
    decl : hack.Declaration
  }
  { N, ParentName, ParentNamespace, D } where
  ParentQName = hack.QName {name = ParentName, namespace_ = ParentNamespace};
  hack.ClassDefinition { declaration = { name = ParentQName }, members = Mems} |
  hack.InterfaceDefinition { declaration = { name = ParentQName }, members = Mems} |
  hack.TraitDefinition { declaration = { name = ParentQName }, members = Mems};
  D = Mems[..];
  D = (
    { classConst = { name = N }} |
    { method = {name = N}} |
    { property_ = { name = N }} |
    {typeConst = {name = N}}
  ) : hack.Declaration;

# Find an Enumerator in a Enum
#
# Although enums are containers, this predicate is distinct from 'SearchInContainer'
# because there the child types can belong to any of the other three container types,
# while Enumerators can only have EnumDeclaration as parent, and Enums cannot contain
# the other child types
#
# Helps SearchInContainerOrEnum to find declarations in enum contexts
predicate SearchInEnum :
  {
    name : hack.Name,
    enumName : hack.Name,
    enumNamespace : maybe hack.NamespaceQName,
    decl : hack.Declaration
  }
  { N, ParentName, ParentNamespace, E } where
  ParentQName = hack.QName {name = ParentName, namespace_ = ParentNamespace};
  ParentEnum = hack.EnumDeclaration { name = ParentQName };
  E = hack.Declaration { enumerator = { name = N, enumeration = ParentEnum }};

# This can be used to search for concrete syntax like
#
# \NamespaceFoo\ClassBar::MethodBaz
# or
# \NamespaceFoo\EnumBar::EnumeratorBaz
#
# Also helps SearchInContext to find declarations in container and enum contexts
predicate SearchInContainerOrEnum :
  {
    name : hack.Name,
    contextName : hack.Name,
    contextNamespace : maybe hack.NamespaceQName,
    decl : hack.Declaration
  }
  { N, ParentName, ParentNamespace, Decl } where
  Decl = (
   hack.QName { name = ParentName, namespace_ = ParentNamespace};
   (D where
     SearchInContainer { name = N, containerName = ParentName, containerNamespace = ParentNamespace, decl = D }) |
   (E where
     SearchInEnum {name = N, enumName = ParentName, enumNamespace = ParentNamespace, decl = E})
   )

# SearchInContext can be used to search for symbols with a non-empty context.
#
# SearchInContext can find classConst, method, property_, and typeConst in
# ContainerDeclaration, find enumerator in EnumDeclaration,
# and find the other declaration kinds in a non-empty
# NamespaceQName.
#
# Thus the contextName may be a class, interface, trait,
# enum, or namespace.
#
# This is complementary to SearchForGlobal and SearchByName.
predicate SearchInContext :
  {
    name : hack.Name,
    contextName : hack.Name,
    contextNamespace : maybe hack.NamespaceQName,
    decl : hack.Declaration
  }
  { N, ParentName, ParentNamespace, Decl } where
  Decl =
    (D where
      SearchInContainerOrEnum { name = N, contextName = ParentName, contextNamespace = ParentNamespace, decl = D }) |
    (D where
      NS = hack.NamespaceQName { name = ParentName, parent = ParentNamespace };
      SearchInNamespace {name = N, namespace_ = { just = NS }, decl = D} )

#
# Generating qnames and namespace qnames. We don't have recursion but we'd
# like to compile the namespace tokens into a recursive QName type so we unroll
#
# We use the naming "Scope" to be consistent with the cxx implementation
#
# We specifically only search in non-empty namespaces, relying on
# SearchByName for the global namespace search or wild cards. So
# these won't match global constants or un-namespaced symbols.
#
predicate QueryToScope:
  {
    query : [string],
    scopeName : hack.Name,
    scopeNamespace : maybe hack.NamespaceQName
  }
  { Query, Name, QName } where
    # zero tuple, can't do much with it. We don't have empty scopes
    ( [] = Query; never = Name; QName = nothing : maybe hack.NamespaceQName ) |
    # one tuple
    ( [A] = Query;
      Name = hack.Name A; nothing = QName ) | #
    # two tuple
    ( [B,A] = Query;
      Name = hack.Name A;
      BName = hack.Name B;
      { just = { name = BName } } = QName ) | # parent wild
    # three tuple
    ( [C,B,A] = Query;
      Name = hack.Name A;
      BName = hack.Name B;
      CName = hack.Name C;
      { just = { name = BName,
        parent = { just = { name = CName }} } }  = QName ) |
    # four tuple
    ( [D,C,B,A] = Query;
      Name = hack.Name A;
      BName = hack.Name B;
      CName = hack.Name C;
      DName = hack.Name D;
      { just = { name = BName,
        parent = { just = { name = CName,
        parent = { just = { name = DName }} }} } }  = QName ) |
    # five tuple, are there any? yes there are many
    ( [E,D,C,B,A] = Query;
      Name = hack.Name A;
      BName = hack.Name B;
      CName = hack.Name C;
      DName = hack.Name D;
      EName = hack.Name E;
      { just = { name = BName,
        parent = { just = { name = CName,
        parent = { just = { name = DName,
        parent = { just = { name = EName }} }} }} } }  = QName ) |
    # six tuple
    ( [F,E,D,C,B,A] = Query;
      Name = hack.Name A;
      BName = hack.Name B;
      CName = hack.Name C;
      DName = hack.Name D;
      EName = hack.Name E;
      FName = hack.Name F;
      { just = { name = BName,
        parent = { just = { name = CName,
        parent = { just = { name = DName,
        parent = { just = { name = EName,
        parent = { just = { name = FName }} }} }} }} } }  = QName ) |
    # seven tuple
    ( [G,F,E,D,C,B,A] = Query;
      Name = hack.Name A;
      BName = hack.Name B;
      CName = hack.Name C;
      DName = hack.Name D;
      EName = hack.Name E;
      FName = hack.Name F;
      GName = hack.Name G;
      { just = { name = BName,
        parent = { just = { name = CName,
        parent = { just = { name = DName,
        parent = { just = { name = EName,
        parent = { just = { name = FName,
        parent = { just = { name = GName }} }} }} }} }} } }  = QName ) |
    # eight tuple
    ( [H,G,F,E,D,C,B,A] = Query;
      Name = hack.Name A;
      BName = hack.Name B;
      CName = hack.Name C;
      DName = hack.Name D;
      EName = hack.Name E;
      FName = hack.Name F;
      GName = hack.Name G;
      HName = hack.Name H;
      { just = { name = BName,
        parent = { just = { name = CName,
        parent = { just = { name = DName,
        parent = { just = { name = EName,
        parent = { just = { name = FName,
        parent = { just = { name = GName,
        parent = { just = { name = HName }} }} }} }} }} }} } }  = QName )

}
